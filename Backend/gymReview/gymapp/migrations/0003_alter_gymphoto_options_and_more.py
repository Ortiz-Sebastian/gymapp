# Generated by Django 5.1.7 on 2025-10-09 02:16

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('gymapp', '0002_comment_file_upload_gymphoto'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='gymphoto',
            options={'ordering': ['-is_google_photo', 'moderation_status', '-likes_count', '-uploaded_at']},
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='auto_moderation_flags',
            field=models.JSONField(blank=True, default=list, help_text='List of detected issues'),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='auto_moderation_score',
            field=models.FloatField(blank=True, help_text='AI confidence score (0-1)', null=True),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='caption',
            field=models.CharField(blank=True, help_text='Optional caption for the photo', max_length=200),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='likes_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='moderated_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='moderated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_photos', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='moderation_notes',
            field=models.TextField(blank=True, help_text='Internal notes about moderation decision'),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='moderation_status',
            field=models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('flagged', 'Flagged for Review')], default='pending', max_length=20),
        ),
        migrations.AddField(
            model_name='gymphoto',
            name='rejection_reason',
            field=models.CharField(blank=True, choices=[('inappropriate_content', 'Inappropriate Content'), ('nudity', 'Nudity or Sexual Content'), ('violence', 'Violence or Harmful Content'), ('spam', 'Spam or Irrelevant'), ('copyright', 'Copyright Violation'), ('other', 'Other Policy Violation')], max_length=30),
        ),
        migrations.AddField(
            model_name='review',
            name='helpful_votes',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='review',
            name='not_helpful_votes',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='review',
            name='review_photo',
            field=models.ImageField(blank=True, help_text='Optional photo to accompany your review', null=True, upload_to='review_photos/'),
        ),
        migrations.AddField(
            model_name='review',
            name='review_text',
            field=models.TextField(blank=True, help_text='Share your detailed experience at this gym'),
        ),
        migrations.AddField(
            model_name='review',
            name='would_recommend',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='user',
            name='display_name',
            field=models.CharField(blank=True, help_text='Display name for reviews (if not anonymous)', max_length=50),
        ),
        migrations.AddField(
            model_name='user',
            name='is_anonymous_account',
            field=models.BooleanField(default=True, help_text="If True, user's reviews will be shown as anonymous"),
        ),
        migrations.CreateModel(
            name='PhotoLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='gymapp.gymphoto')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('photo', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PhotoReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('inappropriate_content', 'Inappropriate Content'), ('nudity', 'Nudity or Sexual Content'), ('violence', 'Violence or Harmful Content'), ('spam', 'Spam or Irrelevant'), ('copyright', 'Copyright Violation'), ('harassment', 'Harassment or Bullying'), ('other', 'Other')], max_length=30)),
                ('description', models.TextField(blank=True, help_text='Additional details about the report')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewed', 'Reviewed'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='gymapp.gymphoto')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photo_reports', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('photo', 'reporter')},
            },
        ),
        migrations.CreateModel(
            name='ReviewVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='gymapp.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('review', 'user')},
            },
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='gymapp.gym')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_gyms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'gym')},
            },
        ),
        migrations.DeleteModel(
            name='Comment',
        ),
    ]
