# Generated by Django 5.1.7 on 2025-10-18 01:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('gymapp', '0003_alter_gymphoto_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AmenityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon name for frontend', max_length=50)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Amenity Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='account_age_days',
            field=models.IntegerField(default=0, help_text='Account age in days'),
        ),
        migrations.AddField(
            model_name='user',
            name='reputation_score',
            field=models.IntegerField(default=0, help_text='User reputation score'),
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon name for frontend', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('suggestion_votes', models.PositiveIntegerField(default=0)),
                ('is_community_suggested', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Community Review'), ('approved', 'Approved by Community'), ('rejected', 'Rejected by Community')], default='approved', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('suggested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suggested_amenities', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='gymapp.amenitycategory')),
            ],
            options={
                'verbose_name_plural': 'Amenities',
                'ordering': ['category__sort_order', 'category__name', 'name'],
                'unique_together': {('name', 'category')},
            },
        ),
        migrations.CreateModel(
            name='GymAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('positive_votes', models.PositiveIntegerField(default=0)),
                ('negative_votes', models.PositiveIntegerField(default=0)),
                ('confidence_score', models.FloatField(default=0.0, help_text='Calculated confidence based on weighted assertions')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved by Community'), ('rejected', 'Rejected by Community'), ('flagged', 'Flagged for Review')], default='pending', max_length=20)),
                ('is_verified', models.BooleanField(default=False, help_text='Verified by community consensus')),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional details about this amenity')),
                ('is_available', models.BooleanField(default=True, help_text='Currently available')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gym_amenities', to='gymapp.amenity')),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gym_amenities', to='gymapp.gym')),
            ],
            options={
                'ordering': ['-confidence_score', 'amenity__category__sort_order', 'amenity__category__name', 'amenity__name'],
                'unique_together': {('gym', 'amenity')},
            },
        ),
        migrations.CreateModel(
            name='AmenityVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('positive', 'Positive'), ('negative', 'Negative')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenity_votes', to=settings.AUTH_USER_MODEL)),
                ('gym_amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='gymapp.gymamenity')),
            ],
            options={
                'unique_together': {('gym_amenity', 'user')},
            },
        ),
        migrations.CreateModel(
            name='AmenityReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('incorrect', 'Amenity Not Available'), ('missing', 'Amenity Missing'), ('outdated', 'Information Outdated'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('reviewed', 'Reviewed'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenity_reports', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_amenity_reports', to=settings.AUTH_USER_MODEL)),
                ('gym_amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='gymapp.gymamenity')),
            ],
            options={
                'unique_together': {('gym_amenity', 'reporter')},
            },
        ),
        migrations.CreateModel(
            name='GymAmenityAssertion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_amenity', models.BooleanField(help_text="User's assertion: does this gym have this amenity?")),
                ('weight', models.FloatField(default=1.0, help_text='Weight based on user reputation and account age')),
                ('notes', models.TextField(blank=True, help_text='Optional notes about the assertion')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gym_assertions', to='gymapp.amenity')),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenity_assertions', to='gymapp.gym')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenity_assertions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('gym', 'amenity', 'user')},
            },
        ),
        migrations.CreateModel(
            name='GymClaim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('revoked', 'Revoked')], default='pending', max_length=20)),
                ('business_name', models.CharField(blank=True, max_length=200)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('verification_documents', models.FileField(blank=True, null=True, upload_to='verification_docs/')),
                ('claim_notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('claimant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gym_claims', to=settings.AUTH_USER_MODEL)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='gymapp.gym')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_claims', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('gym', 'claimant')},
            },
        ),
    ]
